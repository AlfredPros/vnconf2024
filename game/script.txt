
Duration: 20 + 5 minutes.


First of all, a sound test because this talk will involve some audio panning.
Can you hear the music go from left to right? ... Alright.

Hello! My name is Alfred and welcome to my tech talk!
The topic I will be talking about is about dynamic audio implementation with Ren'Py.
I will cover the basics to a more advanced technique.
The techniques that will be shown here should also be possible to be done in other game engine such as GameMaker Studio and other.

A little bit about myself, I've been working with Ren'Py for over 6 years now.
I've worked on several VN and game projects, the notable one being a lead programmer in Mycorrhiza visual novel.
This is the first time I am here as a speaker!
And a fun fact, this entire presentation is made in Ren'Py. 

In this talk, I am partnered with Tim Reichert. This guy.
In case you didn't know, he is a composer, sound designer, audio editor.
Not only those, He is also the project lead and writer in Mycorrhiza VN. 
He participated as a speaker in last year's VN Conference about what dynamic audio is, so this talk is meant to expand it further.
If you have any audio-specific questions, Tim will help answer that for you.
Lastly, his hidden talent is that he is good at singing.

A friendly warning, because this talk is oriented on the technical side,
Ren'Py and Python codes are used in this talk; along with some math too.
I will try my best to keep the codes and math at minimum and to make them more digestable. 
That aside, the source code and this talk and its script is available on GitHub. Link is in the chat.
Inside it there's a bonus section for supplementary and unused shenanigan when making this talk.

That's that for the introduction. Now, let's get into the topic.

First of all, what is dynamic audio?
Here I quote the definition from Tim, "Dynamic audio is audio that is *modified*, or which's 
sequence is modified *during gameplay*. The change can be a result of a *player's actions*, conscious 
or unconscious, or variables being *randomized* independent of a player's actions.". ...
This means that audio that is playing or will be played can be changed by player's interaction or by random chances.

We can derive dynamic audio into two categories.
First, audio that is affected by player's actions,
and second, audio that is affected by random chance or randomization.
I will dissect each of them further, starting from player's actions.

Imagine a scenario where a main character is having the best time of its life.
Here a calm music is playing in the background. ...
Suddenly, a disaster struck and the music is changed to a tense one.

Alright, let's rewind from the start.
I will put up the scene on top left and we will check the code for this scene.
This is the first four lines of code.
First, we show the background house_light.
Here on the second line, we play the music gentleness.
Then show the dialogue.
Notice that I put pause here. 
I intentionally put the pause here to indicate player's action to click for the scene to continue.
As the player clicks, the scene changed. The code structure is the same, but notice that we change the music 
from gentleness ... to splatter.

Let's talk about audio channels for a sec.
By default, Ren'Py has three audio channels, which are music, sound, and voice.
Each audio channels can only play one audio at a time.
And it is possible to queue multiple audios in a channel. This will be mentioned later in the talk, 
so keep this information at the back of your head. 

Previously, I showed you an example where the music changed suddenly, so let's take a look on another example.

... Crossfade is a term we use to switch one audio to another in cross-like manner.
Here I have a small demo of two progress bar for music and sound channels.
The "switch" button, if pressed, ...
it will fadeout the current channel, and fadein the other channel at the same time. ...
In this case, the music channel is playing the instrumental version.
Both audio has the same length and instrumental, so
I tried to make sure their current duration is the same when we switch.

Looking under the hood, when player clicks the "switch" button, it jumps you into a label to switch the audio channel.
As for the code, it looks something like this.
First, we do an if check to switch the music channel or not.
If we switch to music channel, we do the following two lines of code.
Starting by playing the instrumental version in music channel with 2 seconds fade in.
And then we stop sound channel with 2 seconds fade out.
Notice here that I used "sync sound". This tells Ren'Py to sync the current duration of the audio with the sound channel.
And here I put loop 0 second to let Ren'Py know that once the audio ends playing, it loops back at 0 second mark.
If you don't use this loop 0 seconds, the audio may loop back to the duration it started playing, 
which is not ideal for this scenario.
On hind sight, when we switch to sound channel, it will play the sound channel and stop the music channel instead.

Common issue when you're dealing with playing multiple audio channels is that 
it takes time to load the audio before it can play.
This result in two audio channels to desync from each other. 
This issue is especially worse if your computer spec is on the lower end.

Ren'Py has a feature to exactly fix this issue.
Instead of starting an audio while the other is already playing, let's just load all of them first, then play them at the same time!
Which in Ren'Py term, it's called syncronous start.

Let me demonstrate it.
On the top right, we have progress bar for music and sound channels.
Here the main character finally goes outside.
Notice that both channels are playing at the same time, but the sound channel is muted. ...
Then as the player proceed to the next scene, the music channel is muted and sound channel is unmuted.

Let's rewind and focus on how it works.
After showing the background scene, we play both music and sound channel. ...
The second and third line here is responsible to play the audio. ...
We use synchro_start to make sure that both of the audio play at exactly the same time. ...
Then we set the sound channel's volume to 0.

After the player continues, we switch their volume value.
The music channel gets muted, while sound channel gets their volume to back to 1

We can utilize audio channels further by putting them in layers.
This is what we call, "vertical rearrangement"
For analogy, you can imagine audio layers like character customization layers.
Each of these are customizable. You can replace or hide them. ...
By having all of these layers, it allows us to generate characters more unique and interesting.

Now, this is what would character customization look like if it's audio instead.
Just like the counterpart, you can replace or mute them. ...
In a more straightforward example, let's first mute the Pattern channel.
As a character art comes to view, the Pattern channel becomes unmuted.
This effect would give a more meaning to the music.

Now, you have seen some of the basic implementation of dynamic audio.
I will now step the difficulty by a notch.
In most visual novels, mouse is not utilized as much because all you need to do in most cases is a button to continue 
the text or to choose options.
But mouse allows you to do many interesting interactivity.
One of which is to use mouse position. ...
Remember how I pull up this panning demo for the audio test?
Turns out, you can use mouse to control the audio panning. ...
You can even move the source point to wherever you want. ... Including the radius too. ...

One important concept you need to know first, is Screen.
How I teach my students about screen is that you can imagine screen as a blank canvas.
In it, you can put almost anything you want, including image like so. ...
You can make the image move by using buttons. ...
What if we want the image move continuously?
In screen, we have timer, which lets us to change the image position for, let's say, 1 second.
We can reduce the timer even more to 0.5 second
This time 0.1 second
I'm sure you know what's happening here. The smaller the timer, the smoother the movement go.
(Oh, there she goes.)
Instead of moving image, we can use it to track player's mouse position

Here's the code for it.
We begin with setting up the variables to know the mouse position in x and y coordinate.
Then we define our screen, which is named "cursor_position"
In this screen, we have a text to show the current mouse position.
To know where the mouse is, we have to use renpy.mouse_get_pos function and put it in our variables.
Lastly, the timer here is set on repeat to refresh for about 0.05 seconds. ...

Now, the things I like about this method is that it allows for complex screen uses.
The timer duration can be changed too which allows flexibility over how often the screen should be refreshed
And I think it is easier to code and put it together.

However, there are some downsides.
This method refreshes all interaction, which may not be ideal for some cases. 
If you experiment this and set the timer value a bit too low, it may break how button hover works, 
so I don't advice set it too low.
As of current, this method doesn't work too well for Ren'Py 7.5.2/8.0.2 or higher because in that version, 
button hover behavior changed in a not so supportive way.
It would be great if this is made into an actual feature instead of just a tech to make complex screen uses. ...

Alright, where were we? Yes, the mouse panning.
Let's make one. Suppose we have a circle with radius of 200 pixels.
The center coordinate of the circle, we call them a and b
What we want is so that when the mouse is on the left side of the circle, the value is -1, which the the left pan.
Otherwise, if the mouse is on the right side of the circle, the value is 1.
I've done some math and we have a function of f(x), where x is the mouse x coordinate, 
which equals to x - a then divide it by the circle radius.
If you want a homework, you can try to find how to I came to that formula.
Now, onto the code.
We start by setting up our variables. Here we only need to know where mouse x coordinate is and the panning value.
Then we define our screen, which takes in the x center point of the circle and its radius.
In it, we get our mouse x coordinate.
To get the pan value, we can divide the area of the screen into three sections: the left side of the circle, 
the circle area, and the right side of the circle.
This if statement handles the left side of the circle, which always sets the pan value to -1. ...
then, the circle area. We use the formula we got earlier and plug it in.
I put in the float function there to show that the pan value should be a float number or decimal. ...
Lastly, the right side, which will always be the value of 1. ...
Now that we have the pan value we need, we set the music channel pan to that value. ...
Then last, but not least, we make sure to refresh it every 0.05 seconds.

Huff... You have made it past the hardest part. Congratulations!

If you understood all the things I've explained so far, you have more or less know
how to utilize interactive dynamic audio to your visual novels.
Now, let's check out the randomization.

A simple example of this is a button that makes random sounds each time the player clicks it. ...
In this scenario, each time you click the button, it jumps to a label, which makes a random sound.

The code looks like this.
First, we pick a random number between 1 and 2.
Then, we play a sound according to the random number we get. ...

The last topic of this talk is about horizontal rearrangement using randomization.
Instead of vertical where we increase the audio layers, we use just a layer, but we have queue of other audio tracks. ...
You can imagine queue as a container.
In it, I can put in random numbers from 0 to 2. 
The numbers here are suppose to represent the audio files that will be played later.

Here is the last demo of the day.
In this demo, I have an empty queue with no music playing.
Then, I play a music. The next thing I can do is to add more music to the queue to play.
Ren'Py allows it to add and clear queue at ease, so I highly encourage you to play around with this 
as its behavior is pretty interesting.

A simpler scenario of this for a label script would be something like this.
Where we loop for 5 times for these two lines of code.
In this loop, we pick a random number from 1 to 3.
Then we queue up an audio based on the random number we get.

Alright! That's all for now about randomization in dynamic audio. 
You can certainly combine horizontal rearrangement with vertical, which would make the music a lot more unique sounding.
This, is what we did in Mycorrhiza too.

In conclusion, we have explored some dynamic audio implementations in Ren'Py from the player's interactions to randomization.
We can achieve them thanks to audio channels, screen, and random number functions.

I'd like to thank Tim for helping me with this talk along with useful tips he gave me.
Grant Sanderson for the inspiration to make a presentation like this one.
BlackWing BinLan for the character assets.
And You for coming here to this talk and for the vodders who is watching!

This presentation is made using 
Ranim, a Ren'Py template for presentation like this, totally inspired by manim animation engine.
and Ren'Py 7.5.1

Do you have any questions? ...

Thank you very much for all of your questions! I hope to see you again next time! :D


Ranim: a manim-inspired Ren'Py template for presentation and animation.

















